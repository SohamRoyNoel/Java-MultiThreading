package com.concurrency.main;

import java.util.concurrent.locks.ReentrantLock;


/*
 * Lock can be used as a replacement of Synchronized  
 * */
public class Lock {

	private static int counter = 0;
	private static ReentrantLock lock = new ReentrantLock();

	public static void increment() {
		for (int i = 0; i < 10000; i++) {
			counter++;
		}
			
	}

	public static void main(String[] args) {

		Thread t1 = new Thread(new Runnable() {

			@Override
			public void run() {
				increment();				
			}
		});

		Thread t2 = new Thread(new Runnable() {

			@Override
			public void run() {
				increment();				
			}
		});
		
		
		t1.start();
		t2.start();
		
		try {
			t1.join();
			t2.join();
		}catch (InterruptedException e) {
			
		}
		
		System.out.println(counter);
	}
}
